// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/arpb2/C-3PO/third_party/ent/level"
	"github.com/arpb2/C-3PO/third_party/ent/schema"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// LevelCreate is the builder for creating a Level entity.
type LevelCreate struct {
	config
	mutation *LevelMutation
	hooks    []Hook
}

// SetCreatedAt sets the created_at field.
func (lc *LevelCreate) SetCreatedAt(t time.Time) *LevelCreate {
	lc.mutation.SetCreatedAt(t)
	return lc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (lc *LevelCreate) SetNillableCreatedAt(t *time.Time) *LevelCreate {
	if t != nil {
		lc.SetCreatedAt(*t)
	}
	return lc
}

// SetUpdatedAt sets the updated_at field.
func (lc *LevelCreate) SetUpdatedAt(t time.Time) *LevelCreate {
	lc.mutation.SetUpdatedAt(t)
	return lc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (lc *LevelCreate) SetNillableUpdatedAt(t *time.Time) *LevelCreate {
	if t != nil {
		lc.SetUpdatedAt(*t)
	}
	return lc
}

// SetName sets the name field.
func (lc *LevelCreate) SetName(s string) *LevelCreate {
	lc.mutation.SetName(s)
	return lc
}

// SetDescription sets the description field.
func (lc *LevelCreate) SetDescription(s string) *LevelCreate {
	lc.mutation.SetDescription(s)
	return lc
}

// SetDefinition sets the definition field.
func (lc *LevelCreate) SetDefinition(sd *schema.LevelDefinition) *LevelCreate {
	lc.mutation.SetDefinition(sd)
	return lc
}

// SetID sets the id field.
func (lc *LevelCreate) SetID(u uint) *LevelCreate {
	lc.mutation.SetID(u)
	return lc
}

// Save creates the Level in the database.
func (lc *LevelCreate) Save(ctx context.Context) (*Level, error) {
	if _, ok := lc.mutation.CreatedAt(); !ok {
		v := level.DefaultCreatedAt()
		lc.mutation.SetCreatedAt(v)
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		v := level.DefaultUpdatedAt()
		lc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lc.mutation.Name(); !ok {
		return nil, errors.New("ent: missing required field \"name\"")
	}
	if v, ok := lc.mutation.Name(); ok {
		if err := level.NameValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
		}
	}
	if _, ok := lc.mutation.Description(); !ok {
		return nil, errors.New("ent: missing required field \"description\"")
	}
	if v, ok := lc.mutation.Description(); ok {
		if err := level.DescriptionValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"description\": %v", err)
		}
	}
	if _, ok := lc.mutation.Definition(); !ok {
		return nil, errors.New("ent: missing required field \"definition\"")
	}
	var (
		err  error
		node *Level
	)
	if len(lc.hooks) == 0 {
		node, err = lc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LevelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lc.mutation = mutation
			node, err = lc.sqlSave(ctx)
			return node, err
		})
		for i := len(lc.hooks) - 1; i >= 0; i-- {
			mut = lc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LevelCreate) SaveX(ctx context.Context) *Level {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (lc *LevelCreate) sqlSave(ctx context.Context) (*Level, error) {
	var (
		l     = &Level{config: lc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: level.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: level.FieldID,
			},
		}
	)
	if id, ok := lc.mutation.ID(); ok {
		l.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: level.FieldCreatedAt,
		})
		l.CreatedAt = value
	}
	if value, ok := lc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: level.FieldUpdatedAt,
		})
		l.UpdatedAt = value
	}
	if value, ok := lc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: level.FieldName,
		})
		l.Name = value
	}
	if value, ok := lc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: level.FieldDescription,
		})
		l.Description = value
	}
	if value, ok := lc.mutation.Definition(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: level.FieldDefinition,
		})
		l.Definition = value
	}
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if l.ID == 0 {
		id := _spec.ID.Value.(int64)
		l.ID = uint(id)
	}
	return l, nil
}
