// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/arpb2/C-3PO/third_party/ent/level"
	"github.com/arpb2/C-3PO/third_party/ent/user"
	"github.com/arpb2/C-3PO/third_party/ent/userlevel"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// UserLevelCreate is the builder for creating a UserLevel entity.
type UserLevelCreate struct {
	config
	mutation *UserLevelMutation
	hooks    []Hook
}

// SetCreatedAt sets the created_at field.
func (ulc *UserLevelCreate) SetCreatedAt(t time.Time) *UserLevelCreate {
	ulc.mutation.SetCreatedAt(t)
	return ulc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (ulc *UserLevelCreate) SetNillableCreatedAt(t *time.Time) *UserLevelCreate {
	if t != nil {
		ulc.SetCreatedAt(*t)
	}
	return ulc
}

// SetUpdatedAt sets the updated_at field.
func (ulc *UserLevelCreate) SetUpdatedAt(t time.Time) *UserLevelCreate {
	ulc.mutation.SetUpdatedAt(t)
	return ulc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (ulc *UserLevelCreate) SetNillableUpdatedAt(t *time.Time) *UserLevelCreate {
	if t != nil {
		ulc.SetUpdatedAt(*t)
	}
	return ulc
}

// SetCode sets the code field.
func (ulc *UserLevelCreate) SetCode(s string) *UserLevelCreate {
	ulc.mutation.SetCode(s)
	return ulc
}

// SetWorkspace sets the workspace field.
func (ulc *UserLevelCreate) SetWorkspace(s string) *UserLevelCreate {
	ulc.mutation.SetWorkspace(s)
	return ulc
}

// SetDeveloperID sets the developer edge to User by id.
func (ulc *UserLevelCreate) SetDeveloperID(id uint) *UserLevelCreate {
	ulc.mutation.SetDeveloperID(id)
	return ulc
}

// SetDeveloper sets the developer edge to User.
func (ulc *UserLevelCreate) SetDeveloper(u *User) *UserLevelCreate {
	return ulc.SetDeveloperID(u.ID)
}

// SetLevelID sets the level edge to Level by id.
func (ulc *UserLevelCreate) SetLevelID(id uint) *UserLevelCreate {
	ulc.mutation.SetLevelID(id)
	return ulc
}

// SetLevel sets the level edge to Level.
func (ulc *UserLevelCreate) SetLevel(l *Level) *UserLevelCreate {
	return ulc.SetLevelID(l.ID)
}

// Save creates the UserLevel in the database.
func (ulc *UserLevelCreate) Save(ctx context.Context) (*UserLevel, error) {
	if _, ok := ulc.mutation.CreatedAt(); !ok {
		v := userlevel.DefaultCreatedAt()
		ulc.mutation.SetCreatedAt(v)
	}
	if _, ok := ulc.mutation.UpdatedAt(); !ok {
		v := userlevel.DefaultUpdatedAt()
		ulc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ulc.mutation.Code(); !ok {
		return nil, errors.New("ent: missing required field \"code\"")
	}
	if v, ok := ulc.mutation.Code(); ok {
		if err := userlevel.CodeValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"code\": %v", err)
		}
	}
	if _, ok := ulc.mutation.Workspace(); !ok {
		return nil, errors.New("ent: missing required field \"workspace\"")
	}
	if v, ok := ulc.mutation.Workspace(); ok {
		if err := userlevel.WorkspaceValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"workspace\": %v", err)
		}
	}
	if _, ok := ulc.mutation.DeveloperID(); !ok {
		return nil, errors.New("ent: missing required edge \"developer\"")
	}
	if _, ok := ulc.mutation.LevelID(); !ok {
		return nil, errors.New("ent: missing required edge \"level\"")
	}
	var (
		err  error
		node *UserLevel
	)
	if len(ulc.hooks) == 0 {
		node, err = ulc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserLevelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ulc.mutation = mutation
			node, err = ulc.sqlSave(ctx)
			return node, err
		})
		for i := len(ulc.hooks) - 1; i >= 0; i-- {
			mut = ulc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ulc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ulc *UserLevelCreate) SaveX(ctx context.Context) *UserLevel {
	v, err := ulc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ulc *UserLevelCreate) sqlSave(ctx context.Context) (*UserLevel, error) {
	var (
		ul    = &UserLevel{config: ulc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userlevel.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userlevel.FieldID,
			},
		}
	)
	if value, ok := ulc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userlevel.FieldCreatedAt,
		})
		ul.CreatedAt = value
	}
	if value, ok := ulc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userlevel.FieldUpdatedAt,
		})
		ul.UpdatedAt = value
	}
	if value, ok := ulc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlevel.FieldCode,
		})
		ul.Code = value
	}
	if value, ok := ulc.mutation.Workspace(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlevel.FieldWorkspace,
		})
		ul.Workspace = value
	}
	if nodes := ulc.mutation.DeveloperIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userlevel.DeveloperTable,
			Columns: []string{userlevel.DeveloperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ulc.mutation.LevelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userlevel.LevelTable,
			Columns: []string{userlevel.LevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: level.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, ulc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	ul.ID = int(id)
	return ul, nil
}
