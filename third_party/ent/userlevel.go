// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/arpb2/C-3PO/third_party/ent/level"
	"github.com/arpb2/C-3PO/third_party/ent/user"
	"github.com/arpb2/C-3PO/third_party/ent/userlevel"
	"github.com/facebookincubator/ent/dialect/sql"
)

// UserLevel is the model entity for the UserLevel schema.
type UserLevel struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Workspace holds the value of the "workspace" field.
	Workspace string `json:"workspace,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserLevelQuery when eager-loading is set.
	Edges                UserLevelEdges `json:"edges"`
	user_level_developer *uint
	user_level_level     *uint
}

// UserLevelEdges holds the relations/edges for other nodes in the graph.
type UserLevelEdges struct {
	// Developer holds the value of the developer edge.
	Developer *User
	// Level holds the value of the level edge.
	Level *Level
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// DeveloperOrErr returns the Developer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserLevelEdges) DeveloperOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Developer == nil {
			// The edge developer was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Developer, nil
	}
	return nil, &NotLoadedError{edge: "developer"}
}

// LevelOrErr returns the Level value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserLevelEdges) LevelOrErr() (*Level, error) {
	if e.loadedTypes[1] {
		if e.Level == nil {
			// The edge level was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: level.Label}
		}
		return e.Level, nil
	}
	return nil, &NotLoadedError{edge: "level"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserLevel) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullString{}, // code
		&sql.NullString{}, // workspace
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*UserLevel) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // user_level_developer
		&sql.NullInt64{}, // user_level_level
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserLevel fields.
func (ul *UserLevel) assignValues(values ...interface{}) error {
	if m, n := len(values), len(userlevel.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ul.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[0])
	} else if value.Valid {
		ul.CreatedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[1])
	} else if value.Valid {
		ul.UpdatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field code", values[2])
	} else if value.Valid {
		ul.Code = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field workspace", values[3])
	} else if value.Valid {
		ul.Workspace = value.String
	}
	values = values[4:]
	if len(values) == len(userlevel.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_level_developer", value)
		} else if value.Valid {
			ul.user_level_developer = new(uint)
			*ul.user_level_developer = uint(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_level_level", value)
		} else if value.Valid {
			ul.user_level_level = new(uint)
			*ul.user_level_level = uint(value.Int64)
		}
	}
	return nil
}

// QueryDeveloper queries the developer edge of the UserLevel.
func (ul *UserLevel) QueryDeveloper() *UserQuery {
	return (&UserLevelClient{config: ul.config}).QueryDeveloper(ul)
}

// QueryLevel queries the level edge of the UserLevel.
func (ul *UserLevel) QueryLevel() *LevelQuery {
	return (&UserLevelClient{config: ul.config}).QueryLevel(ul)
}

// Update returns a builder for updating this UserLevel.
// Note that, you need to call UserLevel.Unwrap() before calling this method, if this UserLevel
// was returned from a transaction, and the transaction was committed or rolled back.
func (ul *UserLevel) Update() *UserLevelUpdateOne {
	return (&UserLevelClient{config: ul.config}).UpdateOne(ul)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ul *UserLevel) Unwrap() *UserLevel {
	tx, ok := ul.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserLevel is not a transactional entity")
	}
	ul.config.driver = tx.drv
	return ul
}

// String implements the fmt.Stringer.
func (ul *UserLevel) String() string {
	var builder strings.Builder
	builder.WriteString("UserLevel(")
	builder.WriteString(fmt.Sprintf("id=%v", ul.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(ul.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ul.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", code=")
	builder.WriteString(ul.Code)
	builder.WriteString(", workspace=")
	builder.WriteString(ul.Workspace)
	builder.WriteByte(')')
	return builder.String()
}

// UserLevels is a parsable slice of UserLevel.
type UserLevels []*UserLevel

func (ul UserLevels) config(cfg config) {
	for _i := range ul {
		ul[_i].config = cfg
	}
}
