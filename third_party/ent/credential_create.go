// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/arpb2/C-3PO/third_party/ent/credential"
	"github.com/arpb2/C-3PO/third_party/ent/user"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// CredentialCreate is the builder for creating a Credential entity.
type CredentialCreate struct {
	config
	mutation *CredentialMutation
	hooks    []Hook
}

// SetSalt sets the salt field.
func (cc *CredentialCreate) SetSalt(b []byte) *CredentialCreate {
	cc.mutation.SetSalt(b)
	return cc
}

// SetPasswordHash sets the password_hash field.
func (cc *CredentialCreate) SetPasswordHash(b []byte) *CredentialCreate {
	cc.mutation.SetPasswordHash(b)
	return cc
}

// SetHolderID sets the holder edge to User by id.
func (cc *CredentialCreate) SetHolderID(id uint) *CredentialCreate {
	cc.mutation.SetHolderID(id)
	return cc
}

// SetHolder sets the holder edge to User.
func (cc *CredentialCreate) SetHolder(u *User) *CredentialCreate {
	return cc.SetHolderID(u.ID)
}

// Save creates the Credential in the database.
func (cc *CredentialCreate) Save(ctx context.Context) (*Credential, error) {
	if _, ok := cc.mutation.Salt(); !ok {
		return nil, errors.New("ent: missing required field \"salt\"")
	}
	if _, ok := cc.mutation.PasswordHash(); !ok {
		return nil, errors.New("ent: missing required field \"password_hash\"")
	}
	if _, ok := cc.mutation.HolderID(); !ok {
		return nil, errors.New("ent: missing required edge \"holder\"")
	}
	var (
		err  error
		node *Credential
	)
	if len(cc.hooks) == 0 {
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CredentialMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CredentialCreate) SaveX(ctx context.Context) *Credential {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cc *CredentialCreate) sqlSave(ctx context.Context) (*Credential, error) {
	var (
		c     = &Credential{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: credential.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: credential.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.Salt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: credential.FieldSalt,
		})
		c.Salt = value
	}
	if value, ok := cc.mutation.PasswordHash(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: credential.FieldPasswordHash,
		})
		c.PasswordHash = value
	}
	if nodes := cc.mutation.HolderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   credential.HolderTable,
			Columns: []string{credential.HolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	c.ID = int(id)
	return c, nil
}
