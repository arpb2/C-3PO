// Code generated by entc, DO NOT EDIT.

package user

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID        = "id"         // FieldType holds the string denoting the type vertex property in the database.
	FieldType      = "type"       // FieldEmail holds the string denoting the email vertex property in the database.
	FieldEmail     = "email"      // FieldName holds the string denoting the name vertex property in the database.
	FieldName      = "name"       // FieldSurname holds the string denoting the surname vertex property in the database.
	FieldSurname   = "surname"    // FieldCreatedAt holds the string denoting the created_at vertex property in the database.
	FieldCreatedAt = "created_at" // FieldUpdatedAt holds the string denoting the updated_at vertex property in the database.
	FieldUpdatedAt = "updated_at"

	// EdgeLevels holds the string denoting the levels edge name in mutations.
	EdgeLevels = "levels"
	// EdgeCredentials holds the string denoting the credentials edge name in mutations.
	EdgeCredentials = "credentials"

	// Table holds the table name of the user in the database.
	Table = "users"
	// LevelsTable is the table the holds the levels relation/edge.
	LevelsTable = "user_levels"
	// LevelsInverseTable is the table name for the UserLevel entity.
	// It exists in this package in order to avoid circular dependency with the "userlevel" package.
	LevelsInverseTable = "user_levels"
	// LevelsColumn is the table column denoting the levels relation/edge.
	LevelsColumn = "user_levels"
	// CredentialsTable is the table the holds the credentials relation/edge.
	CredentialsTable = "credentials"
	// CredentialsInverseTable is the table name for the Credential entity.
	// It exists in this package in order to avoid circular dependency with the "credential" package.
	CredentialsInverseTable = "credentials"
	// CredentialsColumn is the table column denoting the credentials relation/edge.
	CredentialsColumn = "user_credentials"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldEmail,
	FieldName,
	FieldSurname,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// SurnameValidator is a validator for the "surname" field. It is called by the builders before save.
	SurnameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the created_at field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the updated_at field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Type defines the type for the type enum field.
type Type string

// Type values.
const (
	TypeStudent Type = "student"
	TypeTeacher Type = "teacher"
)

func (s Type) String() string {
	return string(s)
}

// TypeValidator is a validator for the "_type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeStudent, TypeTeacher:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for type field: %q", _type)
	}
}
