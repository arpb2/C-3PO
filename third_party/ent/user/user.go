// Code generated by entc, DO NOT EDIT.

package user

import (
	"time"

	"github.com/arpb2/C-3PO/third_party/ent/schema"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmail holds the string denoting the email vertex property in the database.
	FieldEmail = "email"
	// FieldName holds the string denoting the name vertex property in the database.
	FieldName = "name"
	// FieldSurname holds the string denoting the surname vertex property in the database.
	FieldSurname = "surname"
	// FieldCreatedAt holds the string denoting the created_at vertex property in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at vertex property in the database.
	FieldUpdatedAt = "updated_at"

	// Table holds the table name of the user in the database.
	Table = "users"
	// LevelsTable is the table the holds the levels relation/edge.
	LevelsTable = "user_levels"
	// LevelsInverseTable is the table name for the UserLevel entity.
	// It exists in this package in order to avoid circular dependency with the "userlevel" package.
	LevelsInverseTable = "user_levels"
	// LevelsColumn is the table column denoting the levels relation/edge.
	LevelsColumn = "user_levels"
	// CredentialsTable is the table the holds the credentials relation/edge.
	CredentialsTable = "credentials"
	// CredentialsInverseTable is the table name for the Credential entity.
	// It exists in this package in order to avoid circular dependency with the "credential" package.
	CredentialsInverseTable = "credentials"
	// CredentialsColumn is the table column denoting the credentials relation/edge.
	CredentialsColumn = "user_credentials"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldEmail,
	FieldName,
	FieldSurname,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	fields = schema.User{}.Fields()

	// descEmail is the schema descriptor for email field.
	descEmail = fields[1].Descriptor()
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator = descEmail.Validators[0].(func(string) error)

	// descName is the schema descriptor for name field.
	descName = fields[2].Descriptor()
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator = descName.Validators[0].(func(string) error)

	// descSurname is the schema descriptor for surname field.
	descSurname = fields[3].Descriptor()
	// SurnameValidator is a validator for the "surname" field. It is called by the builders before save.
	SurnameValidator = descSurname.Validators[0].(func(string) error)

	// descCreatedAt is the schema descriptor for created_at field.
	descCreatedAt = fields[4].Descriptor()
	// DefaultCreatedAt holds the default value on creation for the created_at field.
	DefaultCreatedAt = descCreatedAt.Default.(func() time.Time)

	// descUpdatedAt is the schema descriptor for updated_at field.
	descUpdatedAt = fields[5].Descriptor()
	// DefaultUpdatedAt holds the default value on creation for the updated_at field.
	DefaultUpdatedAt = descUpdatedAt.Default.(func() time.Time)
	// UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	UpdateDefaultUpdatedAt = descUpdatedAt.UpdateDefault.(func() time.Time)
)
