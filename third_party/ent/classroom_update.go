// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/arpb2/C-3PO/third_party/ent/classroom"
	"github.com/arpb2/C-3PO/third_party/ent/level"
	"github.com/arpb2/C-3PO/third_party/ent/predicate"
	"github.com/arpb2/C-3PO/third_party/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ClassroomUpdate is the builder for updating Classroom entities.
type ClassroomUpdate struct {
	config
	hooks      []Hook
	mutation   *ClassroomMutation
	predicates []predicate.Classroom
}

// Where adds a new predicate for the builder.
func (cu *ClassroomUpdate) Where(ps ...predicate.Classroom) *ClassroomUpdate {
	cu.predicates = append(cu.predicates, ps...)
	return cu
}

// SetUpdatedAt sets the updated_at field.
func (cu *ClassroomUpdate) SetUpdatedAt(t time.Time) *ClassroomUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetTeacherID sets the teacher edge to User by id.
func (cu *ClassroomUpdate) SetTeacherID(id uint) *ClassroomUpdate {
	cu.mutation.SetTeacherID(id)
	return cu
}

// SetTeacher sets the teacher edge to User.
func (cu *ClassroomUpdate) SetTeacher(u *User) *ClassroomUpdate {
	return cu.SetTeacherID(u.ID)
}

// AddStudentIDs adds the students edge to User by ids.
func (cu *ClassroomUpdate) AddStudentIDs(ids ...uint) *ClassroomUpdate {
	cu.mutation.AddStudentIDs(ids...)
	return cu
}

// AddStudents adds the students edges to User.
func (cu *ClassroomUpdate) AddStudents(u ...*User) *ClassroomUpdate {
	ids := make([]uint, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.AddStudentIDs(ids...)
}

// SetLevelID sets the level edge to Level by id.
func (cu *ClassroomUpdate) SetLevelID(id uint) *ClassroomUpdate {
	cu.mutation.SetLevelID(id)
	return cu
}

// SetNillableLevelID sets the level edge to Level by id if the given value is not nil.
func (cu *ClassroomUpdate) SetNillableLevelID(id *uint) *ClassroomUpdate {
	if id != nil {
		cu = cu.SetLevelID(*id)
	}
	return cu
}

// SetLevel sets the level edge to Level.
func (cu *ClassroomUpdate) SetLevel(l *Level) *ClassroomUpdate {
	return cu.SetLevelID(l.ID)
}

// ClearTeacher clears the teacher edge to User.
func (cu *ClassroomUpdate) ClearTeacher() *ClassroomUpdate {
	cu.mutation.ClearTeacher()
	return cu
}

// RemoveStudentIDs removes the students edge to User by ids.
func (cu *ClassroomUpdate) RemoveStudentIDs(ids ...uint) *ClassroomUpdate {
	cu.mutation.RemoveStudentIDs(ids...)
	return cu
}

// RemoveStudents removes students edges to User.
func (cu *ClassroomUpdate) RemoveStudents(u ...*User) *ClassroomUpdate {
	ids := make([]uint, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.RemoveStudentIDs(ids...)
}

// ClearLevel clears the level edge to Level.
func (cu *ClassroomUpdate) ClearLevel() *ClassroomUpdate {
	cu.mutation.ClearLevel()
	return cu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cu *ClassroomUpdate) Save(ctx context.Context) (int, error) {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := classroom.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}

	if _, ok := cu.mutation.TeacherID(); cu.mutation.TeacherCleared() && !ok {
		return 0, errors.New("ent: clearing a unique edge \"teacher\"")
	}

	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClassroomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ClassroomUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ClassroomUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ClassroomUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ClassroomUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   classroom.Table,
			Columns: classroom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: classroom.FieldID,
			},
		},
	}
	if ps := cu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: classroom.FieldUpdatedAt,
		})
	}
	if cu.mutation.TeacherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   classroom.TeacherTable,
			Columns: []string{classroom.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TeacherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   classroom.TeacherTable,
			Columns: []string{classroom.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := cu.mutation.RemovedStudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   classroom.StudentsTable,
			Columns: []string{classroom.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.StudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   classroom.StudentsTable,
			Columns: []string{classroom.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.LevelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   classroom.LevelTable,
			Columns: []string{classroom.LevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: level.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.LevelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   classroom.LevelTable,
			Columns: []string{classroom.LevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: level.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{classroom.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ClassroomUpdateOne is the builder for updating a single Classroom entity.
type ClassroomUpdateOne struct {
	config
	hooks    []Hook
	mutation *ClassroomMutation
}

// SetUpdatedAt sets the updated_at field.
func (cuo *ClassroomUpdateOne) SetUpdatedAt(t time.Time) *ClassroomUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetTeacherID sets the teacher edge to User by id.
func (cuo *ClassroomUpdateOne) SetTeacherID(id uint) *ClassroomUpdateOne {
	cuo.mutation.SetTeacherID(id)
	return cuo
}

// SetTeacher sets the teacher edge to User.
func (cuo *ClassroomUpdateOne) SetTeacher(u *User) *ClassroomUpdateOne {
	return cuo.SetTeacherID(u.ID)
}

// AddStudentIDs adds the students edge to User by ids.
func (cuo *ClassroomUpdateOne) AddStudentIDs(ids ...uint) *ClassroomUpdateOne {
	cuo.mutation.AddStudentIDs(ids...)
	return cuo
}

// AddStudents adds the students edges to User.
func (cuo *ClassroomUpdateOne) AddStudents(u ...*User) *ClassroomUpdateOne {
	ids := make([]uint, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.AddStudentIDs(ids...)
}

// SetLevelID sets the level edge to Level by id.
func (cuo *ClassroomUpdateOne) SetLevelID(id uint) *ClassroomUpdateOne {
	cuo.mutation.SetLevelID(id)
	return cuo
}

// SetNillableLevelID sets the level edge to Level by id if the given value is not nil.
func (cuo *ClassroomUpdateOne) SetNillableLevelID(id *uint) *ClassroomUpdateOne {
	if id != nil {
		cuo = cuo.SetLevelID(*id)
	}
	return cuo
}

// SetLevel sets the level edge to Level.
func (cuo *ClassroomUpdateOne) SetLevel(l *Level) *ClassroomUpdateOne {
	return cuo.SetLevelID(l.ID)
}

// ClearTeacher clears the teacher edge to User.
func (cuo *ClassroomUpdateOne) ClearTeacher() *ClassroomUpdateOne {
	cuo.mutation.ClearTeacher()
	return cuo
}

// RemoveStudentIDs removes the students edge to User by ids.
func (cuo *ClassroomUpdateOne) RemoveStudentIDs(ids ...uint) *ClassroomUpdateOne {
	cuo.mutation.RemoveStudentIDs(ids...)
	return cuo
}

// RemoveStudents removes students edges to User.
func (cuo *ClassroomUpdateOne) RemoveStudents(u ...*User) *ClassroomUpdateOne {
	ids := make([]uint, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.RemoveStudentIDs(ids...)
}

// ClearLevel clears the level edge to Level.
func (cuo *ClassroomUpdateOne) ClearLevel() *ClassroomUpdateOne {
	cuo.mutation.ClearLevel()
	return cuo
}

// Save executes the query and returns the updated entity.
func (cuo *ClassroomUpdateOne) Save(ctx context.Context) (*Classroom, error) {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := classroom.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}

	if _, ok := cuo.mutation.TeacherID(); cuo.mutation.TeacherCleared() && !ok {
		return nil, errors.New("ent: clearing a unique edge \"teacher\"")
	}

	var (
		err  error
		node *Classroom
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClassroomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ClassroomUpdateOne) SaveX(ctx context.Context) *Classroom {
	c, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return c
}

// Exec executes the query on the entity.
func (cuo *ClassroomUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ClassroomUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ClassroomUpdateOne) sqlSave(ctx context.Context) (c *Classroom, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   classroom.Table,
			Columns: classroom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: classroom.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, fmt.Errorf("missing Classroom.ID for update")
	}
	_spec.Node.ID.Value = id
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: classroom.FieldUpdatedAt,
		})
	}
	if cuo.mutation.TeacherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   classroom.TeacherTable,
			Columns: []string{classroom.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TeacherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   classroom.TeacherTable,
			Columns: []string{classroom.TeacherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := cuo.mutation.RemovedStudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   classroom.StudentsTable,
			Columns: []string{classroom.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.StudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   classroom.StudentsTable,
			Columns: []string{classroom.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.LevelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   classroom.LevelTable,
			Columns: []string{classroom.LevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: level.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.LevelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   classroom.LevelTable,
			Columns: []string{classroom.LevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: level.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	c = &Classroom{config: cuo.config}
	_spec.Assign = c.assignValues
	_spec.ScanValues = c.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{classroom.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return c, nil
}
