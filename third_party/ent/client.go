// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/arpb2/C-3PO/third_party/ent/migrate"

	"github.com/arpb2/C-3PO/third_party/ent/classroom"
	"github.com/arpb2/C-3PO/third_party/ent/credential"
	"github.com/arpb2/C-3PO/third_party/ent/level"
	"github.com/arpb2/C-3PO/third_party/ent/user"
	"github.com/arpb2/C-3PO/third_party/ent/userlevel"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Classroom is the client for interacting with the Classroom builders.
	Classroom *ClassroomClient
	// Credential is the client for interacting with the Credential builders.
	Credential *CredentialClient
	// Level is the client for interacting with the Level builders.
	Level *LevelClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserLevel is the client for interacting with the UserLevel builders.
	UserLevel *UserLevelClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Classroom = NewClassroomClient(c.config)
	c.Credential = NewCredentialClient(c.config)
	c.Level = NewLevelClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserLevel = NewUserLevelClient(c.config)
}

// Open opens a connection to the database specified by the driver name and a
// driver-specific data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:     cfg,
		Classroom:  NewClassroomClient(cfg),
		Credential: NewCredentialClient(cfg),
		Level:      NewLevelClient(cfg),
		User:       NewUserClient(cfg),
		UserLevel:  NewUserLevelClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Classroom.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Classroom.Use(hooks...)
	c.Credential.Use(hooks...)
	c.Level.Use(hooks...)
	c.User.Use(hooks...)
	c.UserLevel.Use(hooks...)
}

// ClassroomClient is a client for the Classroom schema.
type ClassroomClient struct {
	config
}

// NewClassroomClient returns a client for the Classroom from the given config.
func NewClassroomClient(c config) *ClassroomClient {
	return &ClassroomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `classroom.Hooks(f(g(h())))`.
func (c *ClassroomClient) Use(hooks ...Hook) {
	c.hooks.Classroom = append(c.hooks.Classroom, hooks...)
}

// Create returns a create builder for Classroom.
func (c *ClassroomClient) Create() *ClassroomCreate {
	mutation := newClassroomMutation(c.config, OpCreate)
	return &ClassroomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Classroom.
func (c *ClassroomClient) Update() *ClassroomUpdate {
	mutation := newClassroomMutation(c.config, OpUpdate)
	return &ClassroomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClassroomClient) UpdateOne(cl *Classroom) *ClassroomUpdateOne {
	return c.UpdateOneID(cl.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *ClassroomClient) UpdateOneID(id uint) *ClassroomUpdateOne {
	mutation := newClassroomMutation(c.config, OpUpdateOne)
	mutation.id = &id
	return &ClassroomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Classroom.
func (c *ClassroomClient) Delete() *ClassroomDelete {
	mutation := newClassroomMutation(c.config, OpDelete)
	return &ClassroomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ClassroomClient) DeleteOne(cl *Classroom) *ClassroomDeleteOne {
	return c.DeleteOneID(cl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ClassroomClient) DeleteOneID(id uint) *ClassroomDeleteOne {
	builder := c.Delete().Where(classroom.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClassroomDeleteOne{builder}
}

// Create returns a query builder for Classroom.
func (c *ClassroomClient) Query() *ClassroomQuery {
	return &ClassroomQuery{config: c.config}
}

// Get returns a Classroom entity by its id.
func (c *ClassroomClient) Get(ctx context.Context, id uint) (*Classroom, error) {
	return c.Query().Where(classroom.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClassroomClient) GetX(ctx context.Context, id uint) *Classroom {
	cl, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return cl
}

// QueryTeacher queries the teacher edge of a Classroom.
func (c *ClassroomClient) QueryTeacher(cl *Classroom) *UserQuery {
	query := &UserQuery{config: c.config}
	id := cl.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(classroom.Table, classroom.FieldID, id),
		sqlgraph.To(user.Table, user.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, classroom.TeacherTable, classroom.TeacherColumn),
	)
	query.sql = sqlgraph.Neighbors(cl.driver.Dialect(), step)

	return query
}

// QueryStudents queries the students edge of a Classroom.
func (c *ClassroomClient) QueryStudents(cl *Classroom) *UserQuery {
	query := &UserQuery{config: c.config}
	id := cl.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(classroom.Table, classroom.FieldID, id),
		sqlgraph.To(user.Table, user.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, classroom.StudentsTable, classroom.StudentsColumn),
	)
	query.sql = sqlgraph.Neighbors(cl.driver.Dialect(), step)

	return query
}

// QueryLevel queries the level edge of a Classroom.
func (c *ClassroomClient) QueryLevel(cl *Classroom) *LevelQuery {
	query := &LevelQuery{config: c.config}
	id := cl.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(classroom.Table, classroom.FieldID, id),
		sqlgraph.To(level.Table, level.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, classroom.LevelTable, classroom.LevelColumn),
	)
	query.sql = sqlgraph.Neighbors(cl.driver.Dialect(), step)

	return query
}

// Hooks returns the client hooks.
func (c *ClassroomClient) Hooks() []Hook {
	return c.hooks.Classroom
}

// CredentialClient is a client for the Credential schema.
type CredentialClient struct {
	config
}

// NewCredentialClient returns a client for the Credential from the given config.
func NewCredentialClient(c config) *CredentialClient {
	return &CredentialClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `credential.Hooks(f(g(h())))`.
func (c *CredentialClient) Use(hooks ...Hook) {
	c.hooks.Credential = append(c.hooks.Credential, hooks...)
}

// Create returns a create builder for Credential.
func (c *CredentialClient) Create() *CredentialCreate {
	mutation := newCredentialMutation(c.config, OpCreate)
	return &CredentialCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Credential.
func (c *CredentialClient) Update() *CredentialUpdate {
	mutation := newCredentialMutation(c.config, OpUpdate)
	return &CredentialUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CredentialClient) UpdateOne(cr *Credential) *CredentialUpdateOne {
	return c.UpdateOneID(cr.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *CredentialClient) UpdateOneID(id int) *CredentialUpdateOne {
	mutation := newCredentialMutation(c.config, OpUpdateOne)
	mutation.id = &id
	return &CredentialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Credential.
func (c *CredentialClient) Delete() *CredentialDelete {
	mutation := newCredentialMutation(c.config, OpDelete)
	return &CredentialDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CredentialClient) DeleteOne(cr *Credential) *CredentialDeleteOne {
	return c.DeleteOneID(cr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CredentialClient) DeleteOneID(id int) *CredentialDeleteOne {
	builder := c.Delete().Where(credential.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CredentialDeleteOne{builder}
}

// Create returns a query builder for Credential.
func (c *CredentialClient) Query() *CredentialQuery {
	return &CredentialQuery{config: c.config}
}

// Get returns a Credential entity by its id.
func (c *CredentialClient) Get(ctx context.Context, id int) (*Credential, error) {
	return c.Query().Where(credential.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CredentialClient) GetX(ctx context.Context, id int) *Credential {
	cr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return cr
}

// QueryHolder queries the holder edge of a Credential.
func (c *CredentialClient) QueryHolder(cr *Credential) *UserQuery {
	query := &UserQuery{config: c.config}
	id := cr.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(credential.Table, credential.FieldID, id),
		sqlgraph.To(user.Table, user.FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, credential.HolderTable, credential.HolderColumn),
	)
	query.sql = sqlgraph.Neighbors(cr.driver.Dialect(), step)

	return query
}

// Hooks returns the client hooks.
func (c *CredentialClient) Hooks() []Hook {
	return c.hooks.Credential
}

// LevelClient is a client for the Level schema.
type LevelClient struct {
	config
}

// NewLevelClient returns a client for the Level from the given config.
func NewLevelClient(c config) *LevelClient {
	return &LevelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `level.Hooks(f(g(h())))`.
func (c *LevelClient) Use(hooks ...Hook) {
	c.hooks.Level = append(c.hooks.Level, hooks...)
}

// Create returns a create builder for Level.
func (c *LevelClient) Create() *LevelCreate {
	mutation := newLevelMutation(c.config, OpCreate)
	return &LevelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Level.
func (c *LevelClient) Update() *LevelUpdate {
	mutation := newLevelMutation(c.config, OpUpdate)
	return &LevelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LevelClient) UpdateOne(l *Level) *LevelUpdateOne {
	return c.UpdateOneID(l.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *LevelClient) UpdateOneID(id uint) *LevelUpdateOne {
	mutation := newLevelMutation(c.config, OpUpdateOne)
	mutation.id = &id
	return &LevelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Level.
func (c *LevelClient) Delete() *LevelDelete {
	mutation := newLevelMutation(c.config, OpDelete)
	return &LevelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LevelClient) DeleteOne(l *Level) *LevelDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LevelClient) DeleteOneID(id uint) *LevelDeleteOne {
	builder := c.Delete().Where(level.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LevelDeleteOne{builder}
}

// Create returns a query builder for Level.
func (c *LevelClient) Query() *LevelQuery {
	return &LevelQuery{config: c.config}
}

// Get returns a Level entity by its id.
func (c *LevelClient) Get(ctx context.Context, id uint) (*Level, error) {
	return c.Query().Where(level.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LevelClient) GetX(ctx context.Context, id uint) *Level {
	l, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return l
}

// Hooks returns the client hooks.
func (c *LevelClient) Hooks() []Hook {
	return c.hooks.Level
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	return c.UpdateOneID(u.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uint) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne)
	mutation.id = &id
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id uint) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uint) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uint) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryCredentials queries the credentials edge of a User.
func (c *UserClient) QueryCredentials(u *User) *CredentialQuery {
	query := &CredentialQuery{config: c.config}
	id := u.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(user.Table, user.FieldID, id),
		sqlgraph.To(credential.Table, credential.FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, user.CredentialsTable, user.CredentialsColumn),
	)
	query.sql = sqlgraph.Neighbors(u.driver.Dialect(), step)

	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// UserLevelClient is a client for the UserLevel schema.
type UserLevelClient struct {
	config
}

// NewUserLevelClient returns a client for the UserLevel from the given config.
func NewUserLevelClient(c config) *UserLevelClient {
	return &UserLevelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userlevel.Hooks(f(g(h())))`.
func (c *UserLevelClient) Use(hooks ...Hook) {
	c.hooks.UserLevel = append(c.hooks.UserLevel, hooks...)
}

// Create returns a create builder for UserLevel.
func (c *UserLevelClient) Create() *UserLevelCreate {
	mutation := newUserLevelMutation(c.config, OpCreate)
	return &UserLevelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for UserLevel.
func (c *UserLevelClient) Update() *UserLevelUpdate {
	mutation := newUserLevelMutation(c.config, OpUpdate)
	return &UserLevelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserLevelClient) UpdateOne(ul *UserLevel) *UserLevelUpdateOne {
	return c.UpdateOneID(ul.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *UserLevelClient) UpdateOneID(id int) *UserLevelUpdateOne {
	mutation := newUserLevelMutation(c.config, OpUpdateOne)
	mutation.id = &id
	return &UserLevelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserLevel.
func (c *UserLevelClient) Delete() *UserLevelDelete {
	mutation := newUserLevelMutation(c.config, OpDelete)
	return &UserLevelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserLevelClient) DeleteOne(ul *UserLevel) *UserLevelDeleteOne {
	return c.DeleteOneID(ul.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserLevelClient) DeleteOneID(id int) *UserLevelDeleteOne {
	builder := c.Delete().Where(userlevel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserLevelDeleteOne{builder}
}

// Create returns a query builder for UserLevel.
func (c *UserLevelClient) Query() *UserLevelQuery {
	return &UserLevelQuery{config: c.config}
}

// Get returns a UserLevel entity by its id.
func (c *UserLevelClient) Get(ctx context.Context, id int) (*UserLevel, error) {
	return c.Query().Where(userlevel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserLevelClient) GetX(ctx context.Context, id int) *UserLevel {
	ul, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ul
}

// QueryDeveloper queries the developer edge of a UserLevel.
func (c *UserLevelClient) QueryDeveloper(ul *UserLevel) *UserQuery {
	query := &UserQuery{config: c.config}
	id := ul.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(userlevel.Table, userlevel.FieldID, id),
		sqlgraph.To(user.Table, user.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, userlevel.DeveloperTable, userlevel.DeveloperColumn),
	)
	query.sql = sqlgraph.Neighbors(ul.driver.Dialect(), step)

	return query
}

// QueryLevel queries the level edge of a UserLevel.
func (c *UserLevelClient) QueryLevel(ul *UserLevel) *LevelQuery {
	query := &LevelQuery{config: c.config}
	id := ul.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(userlevel.Table, userlevel.FieldID, id),
		sqlgraph.To(level.Table, level.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, userlevel.LevelTable, userlevel.LevelColumn),
	)
	query.sql = sqlgraph.Neighbors(ul.driver.Dialect(), step)

	return query
}

// Hooks returns the client hooks.
func (c *UserLevelClient) Hooks() []Hook {
	return c.hooks.UserLevel
}
