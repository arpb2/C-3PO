// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/arpb2/C-3PO/third_party/ent/level"
	"github.com/arpb2/C-3PO/third_party/ent/predicate"
	"github.com/arpb2/C-3PO/third_party/ent/user"
	"github.com/arpb2/C-3PO/third_party/ent/userlevel"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// UserLevelUpdate is the builder for updating UserLevel entities.
type UserLevelUpdate struct {
	config
	hooks      []Hook
	mutation   *UserLevelMutation
	predicates []predicate.UserLevel
}

// Where adds a new predicate for the builder.
func (ulu *UserLevelUpdate) Where(ps ...predicate.UserLevel) *UserLevelUpdate {
	ulu.predicates = append(ulu.predicates, ps...)
	return ulu
}

// SetUpdatedAt sets the updated_at field.
func (ulu *UserLevelUpdate) SetUpdatedAt(t time.Time) *UserLevelUpdate {
	ulu.mutation.SetUpdatedAt(t)
	return ulu
}

// SetCode sets the code field.
func (ulu *UserLevelUpdate) SetCode(s string) *UserLevelUpdate {
	ulu.mutation.SetCode(s)
	return ulu
}

// SetWorkspace sets the workspace field.
func (ulu *UserLevelUpdate) SetWorkspace(s string) *UserLevelUpdate {
	ulu.mutation.SetWorkspace(s)
	return ulu
}

// SetDeveloperID sets the developer edge to User by id.
func (ulu *UserLevelUpdate) SetDeveloperID(id uint) *UserLevelUpdate {
	ulu.mutation.SetDeveloperID(id)
	return ulu
}

// SetDeveloper sets the developer edge to User.
func (ulu *UserLevelUpdate) SetDeveloper(u *User) *UserLevelUpdate {
	return ulu.SetDeveloperID(u.ID)
}

// SetLevelID sets the level edge to Level by id.
func (ulu *UserLevelUpdate) SetLevelID(id uint) *UserLevelUpdate {
	ulu.mutation.SetLevelID(id)
	return ulu
}

// SetLevel sets the level edge to Level.
func (ulu *UserLevelUpdate) SetLevel(l *Level) *UserLevelUpdate {
	return ulu.SetLevelID(l.ID)
}

// ClearDeveloper clears the developer edge to User.
func (ulu *UserLevelUpdate) ClearDeveloper() *UserLevelUpdate {
	ulu.mutation.ClearDeveloper()
	return ulu
}

// ClearLevel clears the level edge to Level.
func (ulu *UserLevelUpdate) ClearLevel() *UserLevelUpdate {
	ulu.mutation.ClearLevel()
	return ulu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ulu *UserLevelUpdate) Save(ctx context.Context) (int, error) {
	if _, ok := ulu.mutation.UpdatedAt(); !ok {
		v := userlevel.UpdateDefaultUpdatedAt()
		ulu.mutation.SetUpdatedAt(v)
	}
	if v, ok := ulu.mutation.Code(); ok {
		if err := userlevel.CodeValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"code\": %v", err)
		}
	}
	if v, ok := ulu.mutation.Workspace(); ok {
		if err := userlevel.WorkspaceValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"workspace\": %v", err)
		}
	}

	if _, ok := ulu.mutation.DeveloperID(); ulu.mutation.DeveloperCleared() && !ok {
		return 0, errors.New("ent: clearing a unique edge \"developer\"")
	}

	if _, ok := ulu.mutation.LevelID(); ulu.mutation.LevelCleared() && !ok {
		return 0, errors.New("ent: clearing a unique edge \"level\"")
	}
	var (
		err      error
		affected int
	)
	if len(ulu.hooks) == 0 {
		affected, err = ulu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserLevelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ulu.mutation = mutation
			affected, err = ulu.sqlSave(ctx)
			return affected, err
		})
		for i := len(ulu.hooks) - 1; i >= 0; i-- {
			mut = ulu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ulu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ulu *UserLevelUpdate) SaveX(ctx context.Context) int {
	affected, err := ulu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ulu *UserLevelUpdate) Exec(ctx context.Context) error {
	_, err := ulu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ulu *UserLevelUpdate) ExecX(ctx context.Context) {
	if err := ulu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ulu *UserLevelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userlevel.Table,
			Columns: userlevel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userlevel.FieldID,
			},
		},
	}
	if ps := ulu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ulu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userlevel.FieldUpdatedAt,
		})
	}
	if value, ok := ulu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlevel.FieldCode,
		})
	}
	if value, ok := ulu.mutation.Workspace(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlevel.FieldWorkspace,
		})
	}
	if ulu.mutation.DeveloperCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userlevel.DeveloperTable,
			Columns: []string{userlevel.DeveloperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulu.mutation.DeveloperIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userlevel.DeveloperTable,
			Columns: []string{userlevel.DeveloperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ulu.mutation.LevelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userlevel.LevelTable,
			Columns: []string{userlevel.LevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: level.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulu.mutation.LevelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userlevel.LevelTable,
			Columns: []string{userlevel.LevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: level.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ulu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userlevel.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserLevelUpdateOne is the builder for updating a single UserLevel entity.
type UserLevelUpdateOne struct {
	config
	hooks    []Hook
	mutation *UserLevelMutation
}

// SetUpdatedAt sets the updated_at field.
func (uluo *UserLevelUpdateOne) SetUpdatedAt(t time.Time) *UserLevelUpdateOne {
	uluo.mutation.SetUpdatedAt(t)
	return uluo
}

// SetCode sets the code field.
func (uluo *UserLevelUpdateOne) SetCode(s string) *UserLevelUpdateOne {
	uluo.mutation.SetCode(s)
	return uluo
}

// SetWorkspace sets the workspace field.
func (uluo *UserLevelUpdateOne) SetWorkspace(s string) *UserLevelUpdateOne {
	uluo.mutation.SetWorkspace(s)
	return uluo
}

// SetDeveloperID sets the developer edge to User by id.
func (uluo *UserLevelUpdateOne) SetDeveloperID(id uint) *UserLevelUpdateOne {
	uluo.mutation.SetDeveloperID(id)
	return uluo
}

// SetDeveloper sets the developer edge to User.
func (uluo *UserLevelUpdateOne) SetDeveloper(u *User) *UserLevelUpdateOne {
	return uluo.SetDeveloperID(u.ID)
}

// SetLevelID sets the level edge to Level by id.
func (uluo *UserLevelUpdateOne) SetLevelID(id uint) *UserLevelUpdateOne {
	uluo.mutation.SetLevelID(id)
	return uluo
}

// SetLevel sets the level edge to Level.
func (uluo *UserLevelUpdateOne) SetLevel(l *Level) *UserLevelUpdateOne {
	return uluo.SetLevelID(l.ID)
}

// ClearDeveloper clears the developer edge to User.
func (uluo *UserLevelUpdateOne) ClearDeveloper() *UserLevelUpdateOne {
	uluo.mutation.ClearDeveloper()
	return uluo
}

// ClearLevel clears the level edge to Level.
func (uluo *UserLevelUpdateOne) ClearLevel() *UserLevelUpdateOne {
	uluo.mutation.ClearLevel()
	return uluo
}

// Save executes the query and returns the updated entity.
func (uluo *UserLevelUpdateOne) Save(ctx context.Context) (*UserLevel, error) {
	if _, ok := uluo.mutation.UpdatedAt(); !ok {
		v := userlevel.UpdateDefaultUpdatedAt()
		uluo.mutation.SetUpdatedAt(v)
	}
	if v, ok := uluo.mutation.Code(); ok {
		if err := userlevel.CodeValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"code\": %v", err)
		}
	}
	if v, ok := uluo.mutation.Workspace(); ok {
		if err := userlevel.WorkspaceValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"workspace\": %v", err)
		}
	}

	if _, ok := uluo.mutation.DeveloperID(); uluo.mutation.DeveloperCleared() && !ok {
		return nil, errors.New("ent: clearing a unique edge \"developer\"")
	}

	if _, ok := uluo.mutation.LevelID(); uluo.mutation.LevelCleared() && !ok {
		return nil, errors.New("ent: clearing a unique edge \"level\"")
	}
	var (
		err  error
		node *UserLevel
	)
	if len(uluo.hooks) == 0 {
		node, err = uluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserLevelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uluo.mutation = mutation
			node, err = uluo.sqlSave(ctx)
			return node, err
		})
		for i := len(uluo.hooks) - 1; i >= 0; i-- {
			mut = uluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uluo *UserLevelUpdateOne) SaveX(ctx context.Context) *UserLevel {
	ul, err := uluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return ul
}

// Exec executes the query on the entity.
func (uluo *UserLevelUpdateOne) Exec(ctx context.Context) error {
	_, err := uluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uluo *UserLevelUpdateOne) ExecX(ctx context.Context) {
	if err := uluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uluo *UserLevelUpdateOne) sqlSave(ctx context.Context) (ul *UserLevel, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userlevel.Table,
			Columns: userlevel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userlevel.FieldID,
			},
		},
	}
	id, ok := uluo.mutation.ID()
	if !ok {
		return nil, fmt.Errorf("missing UserLevel.ID for update")
	}
	_spec.Node.ID.Value = id
	if value, ok := uluo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userlevel.FieldUpdatedAt,
		})
	}
	if value, ok := uluo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlevel.FieldCode,
		})
	}
	if value, ok := uluo.mutation.Workspace(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlevel.FieldWorkspace,
		})
	}
	if uluo.mutation.DeveloperCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userlevel.DeveloperTable,
			Columns: []string{userlevel.DeveloperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uluo.mutation.DeveloperIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userlevel.DeveloperTable,
			Columns: []string{userlevel.DeveloperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uluo.mutation.LevelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userlevel.LevelTable,
			Columns: []string{userlevel.LevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: level.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uluo.mutation.LevelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userlevel.LevelTable,
			Columns: []string{userlevel.LevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: level.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	ul = &UserLevel{config: uluo.config}
	_spec.Assign = ul.assignValues
	_spec.ScanValues = ul.scanValues()
	if err = sqlgraph.UpdateNode(ctx, uluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userlevel.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return ul, nil
}
