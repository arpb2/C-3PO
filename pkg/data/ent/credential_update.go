// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"github.com/arpb2/C-3PO/pkg/data/ent/credential"
	"github.com/arpb2/C-3PO/pkg/data/ent/predicate"
	"github.com/arpb2/C-3PO/pkg/data/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// CredentialUpdate is the builder for updating Credential entities.
type CredentialUpdate struct {
	config

	password_hash *[]byte
	holder        map[uint]struct{}
	clearedHolder bool
	predicates    []predicate.Credential
}

// Where adds a new predicate for the builder.
func (cu *CredentialUpdate) Where(ps ...predicate.Credential) *CredentialUpdate {
	cu.predicates = append(cu.predicates, ps...)
	return cu
}

// SetPasswordHash sets the password_hash field.
func (cu *CredentialUpdate) SetPasswordHash(b []byte) *CredentialUpdate {
	cu.password_hash = &b
	return cu
}

// SetHolderID sets the holder edge to User by id.
func (cu *CredentialUpdate) SetHolderID(id uint) *CredentialUpdate {
	if cu.holder == nil {
		cu.holder = make(map[uint]struct{})
	}
	cu.holder[id] = struct{}{}
	return cu
}

// SetHolder sets the holder edge to User.
func (cu *CredentialUpdate) SetHolder(u *User) *CredentialUpdate {
	return cu.SetHolderID(u.ID)
}

// ClearHolder clears the holder edge to User.
func (cu *CredentialUpdate) ClearHolder() *CredentialUpdate {
	cu.clearedHolder = true
	return cu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cu *CredentialUpdate) Save(ctx context.Context) (int, error) {
	if len(cu.holder) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"holder\"")
	}
	if cu.clearedHolder && cu.holder == nil {
		return 0, errors.New("ent: clearing a unique edge \"holder\"")
	}
	return cu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CredentialUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CredentialUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CredentialUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CredentialUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   credential.Table,
			Columns: credential.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: credential.FieldID,
			},
		},
	}
	if ps := cu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := cu.password_hash; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  *value,
			Column: credential.FieldPasswordHash,
		})
	}
	if cu.clearedHolder {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   credential.HolderTable,
			Columns: []string{credential.HolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.holder; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   credential.HolderTable,
			Columns: []string{credential.HolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CredentialUpdateOne is the builder for updating a single Credential entity.
type CredentialUpdateOne struct {
	config
	id int

	password_hash *[]byte
	holder        map[uint]struct{}
	clearedHolder bool
}

// SetPasswordHash sets the password_hash field.
func (cuo *CredentialUpdateOne) SetPasswordHash(b []byte) *CredentialUpdateOne {
	cuo.password_hash = &b
	return cuo
}

// SetHolderID sets the holder edge to User by id.
func (cuo *CredentialUpdateOne) SetHolderID(id uint) *CredentialUpdateOne {
	if cuo.holder == nil {
		cuo.holder = make(map[uint]struct{})
	}
	cuo.holder[id] = struct{}{}
	return cuo
}

// SetHolder sets the holder edge to User.
func (cuo *CredentialUpdateOne) SetHolder(u *User) *CredentialUpdateOne {
	return cuo.SetHolderID(u.ID)
}

// ClearHolder clears the holder edge to User.
func (cuo *CredentialUpdateOne) ClearHolder() *CredentialUpdateOne {
	cuo.clearedHolder = true
	return cuo
}

// Save executes the query and returns the updated entity.
func (cuo *CredentialUpdateOne) Save(ctx context.Context) (*Credential, error) {
	if len(cuo.holder) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"holder\"")
	}
	if cuo.clearedHolder && cuo.holder == nil {
		return nil, errors.New("ent: clearing a unique edge \"holder\"")
	}
	return cuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CredentialUpdateOne) SaveX(ctx context.Context) *Credential {
	c, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return c
}

// Exec executes the query on the entity.
func (cuo *CredentialUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CredentialUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CredentialUpdateOne) sqlSave(ctx context.Context) (c *Credential, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   credential.Table,
			Columns: credential.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  cuo.id,
				Type:   field.TypeInt,
				Column: credential.FieldID,
			},
		},
	}
	if value := cuo.password_hash; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  *value,
			Column: credential.FieldPasswordHash,
		})
	}
	if cuo.clearedHolder {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   credential.HolderTable,
			Columns: []string{credential.HolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.holder; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   credential.HolderTable,
			Columns: []string{credential.HolderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	c = &Credential{config: cuo.config}
	_spec.Assign = c.assignValues
	_spec.ScanValues = c.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return c, nil
}
