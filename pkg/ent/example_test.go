// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"log"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
)

// dsn for the database. In order to run the tests locally, run the following command:
//
//	 ENT_INTEGRATION_ENDPOINT="root:pass@tcp(localhost:3306)/test?parseTime=True" go test -v
//
var dsn string

func ExampleCredential() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the credential's edges.

	// create credential vertex with its edges.
	c := client.Credential.
		Create().
		SetSalt(nil).
		SetPasswordHash(nil).
		SaveX(ctx)
	log.Println("credential created:", c)

	// query edges.

	// Output:
}
func ExampleLevel() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the level's edges.

	// create level vertex with its edges.
	l := client.Level.
		Create().
		SetCreatedAt(time.Now()).
		SetUpdatedAt(time.Now()).
		SetName("string").
		SetDescription("string").
		SaveX(ctx)
	log.Println("level created:", l)

	// query edges.

	// Output:
}
func ExampleUser() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the user's edges.
	ul0 := client.UserLevel.
		Create().
		SetCreatedAt(time.Now()).
		SetUpdatedAt(time.Now()).
		SetCode("string").
		SetWorkspace("string").
		SaveX(ctx)
	log.Println("userlevel created:", ul0)
	c1 := client.Credential.
		Create().
		SetSalt(nil).
		SetPasswordHash(nil).
		SaveX(ctx)
	log.Println("credential created:", c1)

	// create user vertex with its edges.
	u := client.User.
		Create().
		SetEmail("string").
		SetName("string").
		SetSurname("string").
		SetCreatedAt(time.Now()).
		SetUpdatedAt(time.Now()).
		AddLevels(ul0).
		SetCredentials(c1).
		SaveX(ctx)
	log.Println("user created:", u)

	// query edges.
	ul0, err = u.QueryLevels().First(ctx)
	if err != nil {
		log.Fatalf("failed querying levels: %v", err)
	}
	log.Println("levels found:", ul0)

	c1, err = u.QueryCredentials().First(ctx)
	if err != nil {
		log.Fatalf("failed querying credentials: %v", err)
	}
	log.Println("credentials found:", c1)

	// Output:
}
func ExampleUserLevel() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the userlevel's edges.
	l1 := client.Level.
		Create().
		SetCreatedAt(time.Now()).
		SetUpdatedAt(time.Now()).
		SetName("string").
		SetDescription("string").
		SaveX(ctx)
	log.Println("level created:", l1)

	// create userlevel vertex with its edges.
	ul := client.UserLevel.
		Create().
		SetCreatedAt(time.Now()).
		SetUpdatedAt(time.Now()).
		SetCode("string").
		SetWorkspace("string").
		SetLevel(l1).
		SaveX(ctx)
	log.Println("userlevel created:", ul)

	// query edges.

	l1, err = ul.QueryLevel().First(ctx)
	if err != nil {
		log.Fatalf("failed querying level: %v", err)
	}
	log.Println("level found:", l1)

	// Output:
}
