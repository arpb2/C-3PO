// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/arpb2/C-3PO/pkg/ent/level"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// LevelCreate is the builder for creating a Level entity.
type LevelCreate struct {
	config
	id          *uint
	created_at  *time.Time
	updated_at  *time.Time
	name        *string
	description *string
}

// SetCreatedAt sets the created_at field.
func (lc *LevelCreate) SetCreatedAt(t time.Time) *LevelCreate {
	lc.created_at = &t
	return lc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (lc *LevelCreate) SetNillableCreatedAt(t *time.Time) *LevelCreate {
	if t != nil {
		lc.SetCreatedAt(*t)
	}
	return lc
}

// SetUpdatedAt sets the updated_at field.
func (lc *LevelCreate) SetUpdatedAt(t time.Time) *LevelCreate {
	lc.updated_at = &t
	return lc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (lc *LevelCreate) SetNillableUpdatedAt(t *time.Time) *LevelCreate {
	if t != nil {
		lc.SetUpdatedAt(*t)
	}
	return lc
}

// SetName sets the name field.
func (lc *LevelCreate) SetName(s string) *LevelCreate {
	lc.name = &s
	return lc
}

// SetDescription sets the description field.
func (lc *LevelCreate) SetDescription(s string) *LevelCreate {
	lc.description = &s
	return lc
}

// SetID sets the id field.
func (lc *LevelCreate) SetID(u uint) *LevelCreate {
	lc.id = &u
	return lc
}

// Save creates the Level in the database.
func (lc *LevelCreate) Save(ctx context.Context) (*Level, error) {
	if lc.created_at == nil {
		v := level.DefaultCreatedAt()
		lc.created_at = &v
	}
	if lc.updated_at == nil {
		v := level.DefaultUpdatedAt()
		lc.updated_at = &v
	}
	if lc.name == nil {
		return nil, errors.New("ent: missing required field \"name\"")
	}
	if err := level.NameValidator(*lc.name); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
	}
	if lc.description == nil {
		return nil, errors.New("ent: missing required field \"description\"")
	}
	if err := level.DescriptionValidator(*lc.description); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"description\": %v", err)
	}
	return lc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LevelCreate) SaveX(ctx context.Context) *Level {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (lc *LevelCreate) sqlSave(ctx context.Context) (*Level, error) {
	var (
		l     = &Level{config: lc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: level.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: level.FieldID,
			},
		}
	)
	if value := lc.id; value != nil {
		l.ID = *value
		_spec.ID.Value = *value
	}
	if value := lc.created_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: level.FieldCreatedAt,
		})
		l.CreatedAt = *value
	}
	if value := lc.updated_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: level.FieldUpdatedAt,
		})
		l.UpdatedAt = *value
	}
	if value := lc.name; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: level.FieldName,
		})
		l.Name = *value
	}
	if value := lc.description; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: level.FieldDescription,
		})
		l.Description = *value
	}
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if l.ID == 0 {
		id := _spec.ID.Value.(int64)
		l.ID = uint(id)
	}
	return l, nil
}
