// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/arpb2/C-3PO/pkg/ent/level"
	"github.com/arpb2/C-3PO/pkg/ent/user"
	"github.com/arpb2/C-3PO/pkg/ent/userlevel"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// UserLevelCreate is the builder for creating a UserLevel entity.
type UserLevelCreate struct {
	config
	created_at *time.Time
	updated_at *time.Time
	code       *string
	workspace  *string
	developer  map[uint]struct{}
	level      map[uint]struct{}
}

// SetCreatedAt sets the created_at field.
func (ulc *UserLevelCreate) SetCreatedAt(t time.Time) *UserLevelCreate {
	ulc.created_at = &t
	return ulc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (ulc *UserLevelCreate) SetNillableCreatedAt(t *time.Time) *UserLevelCreate {
	if t != nil {
		ulc.SetCreatedAt(*t)
	}
	return ulc
}

// SetUpdatedAt sets the updated_at field.
func (ulc *UserLevelCreate) SetUpdatedAt(t time.Time) *UserLevelCreate {
	ulc.updated_at = &t
	return ulc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (ulc *UserLevelCreate) SetNillableUpdatedAt(t *time.Time) *UserLevelCreate {
	if t != nil {
		ulc.SetUpdatedAt(*t)
	}
	return ulc
}

// SetCode sets the code field.
func (ulc *UserLevelCreate) SetCode(s string) *UserLevelCreate {
	ulc.code = &s
	return ulc
}

// SetWorkspace sets the workspace field.
func (ulc *UserLevelCreate) SetWorkspace(s string) *UserLevelCreate {
	ulc.workspace = &s
	return ulc
}

// SetDeveloperID sets the developer edge to User by id.
func (ulc *UserLevelCreate) SetDeveloperID(id uint) *UserLevelCreate {
	if ulc.developer == nil {
		ulc.developer = make(map[uint]struct{})
	}
	ulc.developer[id] = struct{}{}
	return ulc
}

// SetDeveloper sets the developer edge to User.
func (ulc *UserLevelCreate) SetDeveloper(u *User) *UserLevelCreate {
	return ulc.SetDeveloperID(u.ID)
}

// SetLevelID sets the level edge to Level by id.
func (ulc *UserLevelCreate) SetLevelID(id uint) *UserLevelCreate {
	if ulc.level == nil {
		ulc.level = make(map[uint]struct{})
	}
	ulc.level[id] = struct{}{}
	return ulc
}

// SetLevel sets the level edge to Level.
func (ulc *UserLevelCreate) SetLevel(l *Level) *UserLevelCreate {
	return ulc.SetLevelID(l.ID)
}

// Save creates the UserLevel in the database.
func (ulc *UserLevelCreate) Save(ctx context.Context) (*UserLevel, error) {
	if ulc.created_at == nil {
		v := userlevel.DefaultCreatedAt()
		ulc.created_at = &v
	}
	if ulc.updated_at == nil {
		v := userlevel.DefaultUpdatedAt()
		ulc.updated_at = &v
	}
	if ulc.code == nil {
		return nil, errors.New("ent: missing required field \"code\"")
	}
	if err := userlevel.CodeValidator(*ulc.code); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"code\": %v", err)
	}
	if ulc.workspace == nil {
		return nil, errors.New("ent: missing required field \"workspace\"")
	}
	if err := userlevel.WorkspaceValidator(*ulc.workspace); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"workspace\": %v", err)
	}
	if len(ulc.developer) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"developer\"")
	}
	if ulc.developer == nil {
		return nil, errors.New("ent: missing required edge \"developer\"")
	}
	if len(ulc.level) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"level\"")
	}
	if ulc.level == nil {
		return nil, errors.New("ent: missing required edge \"level\"")
	}
	return ulc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (ulc *UserLevelCreate) SaveX(ctx context.Context) *UserLevel {
	v, err := ulc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ulc *UserLevelCreate) sqlSave(ctx context.Context) (*UserLevel, error) {
	var (
		ul    = &UserLevel{config: ulc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userlevel.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userlevel.FieldID,
			},
		}
	)
	if value := ulc.created_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: userlevel.FieldCreatedAt,
		})
		ul.CreatedAt = *value
	}
	if value := ulc.updated_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: userlevel.FieldUpdatedAt,
		})
		ul.UpdatedAt = *value
	}
	if value := ulc.code; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: userlevel.FieldCode,
		})
		ul.Code = *value
	}
	if value := ulc.workspace; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: userlevel.FieldWorkspace,
		})
		ul.Workspace = *value
	}
	if nodes := ulc.developer; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userlevel.DeveloperTable,
			Columns: []string{userlevel.DeveloperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ulc.level; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userlevel.LevelTable,
			Columns: []string{userlevel.LevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint,
					Column: level.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, ulc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	ul.ID = int(id)
	return ul, nil
}
