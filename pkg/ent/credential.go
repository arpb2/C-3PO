// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/arpb2/C-3PO/pkg/ent/credential"
	"github.com/arpb2/C-3PO/pkg/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Credential is the model entity for the Credential schema.
type Credential struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Salt holds the value of the "salt" field.
	Salt []byte `json:"salt,omitempty"`
	// PasswordHash holds the value of the "password_hash" field.
	PasswordHash []byte `json:"password_hash,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CredentialQuery when eager-loading is set.
	Edges            CredentialEdges `json:"edges"`
	user_credentials *uint
}

// CredentialEdges holds the relations/edges for other nodes in the graph.
type CredentialEdges struct {
	// Holder holds the value of the holder edge.
	Holder *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HolderOrErr returns the Holder value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CredentialEdges) HolderOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Holder == nil {
			// The edge holder was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Holder, nil
	}
	return nil, &NotLoadedError{edge: "holder"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Credential) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&[]byte{},        // salt
		&[]byte{},        // password_hash
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Credential) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // user_credentials
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Credential fields.
func (c *Credential) assignValues(values ...interface{}) error {
	if m, n := len(values), len(credential.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field salt", values[0])
	} else if value != nil {
		c.Salt = *value
	}
	if value, ok := values[1].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field password_hash", values[1])
	} else if value != nil {
		c.PasswordHash = *value
	}
	values = values[2:]
	if len(values) == len(credential.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_credentials", value)
		} else if value.Valid {
			c.user_credentials = new(uint)
			*c.user_credentials = uint(value.Int64)
		}
	}
	return nil
}

// QueryHolder queries the holder edge of the Credential.
func (c *Credential) QueryHolder() *UserQuery {
	return (&CredentialClient{c.config}).QueryHolder(c)
}

// Update returns a builder for updating this Credential.
// Note that, you need to call Credential.Unwrap() before calling this method, if this Credential
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Credential) Update() *CredentialUpdateOne {
	return (&CredentialClient{c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Credential) Unwrap() *Credential {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Credential is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Credential) String() string {
	var builder strings.Builder
	builder.WriteString("Credential(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", salt=")
	builder.WriteString(fmt.Sprintf("%v", c.Salt))
	builder.WriteString(", password_hash=")
	builder.WriteString(fmt.Sprintf("%v", c.PasswordHash))
	builder.WriteByte(')')
	return builder.String()
}

// Credentials is a parsable slice of Credential.
type Credentials []*Credential

func (c Credentials) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
