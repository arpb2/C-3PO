// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/arpb2/C-3PO/pkg/ent/level"
	"github.com/arpb2/C-3PO/pkg/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// LevelUpdate is the builder for updating Level entities.
type LevelUpdate struct {
	config

	updated_at  *time.Time
	name        *string
	description *string
	predicates  []predicate.Level
}

// Where adds a new predicate for the builder.
func (lu *LevelUpdate) Where(ps ...predicate.Level) *LevelUpdate {
	lu.predicates = append(lu.predicates, ps...)
	return lu
}

// SetUpdatedAt sets the updated_at field.
func (lu *LevelUpdate) SetUpdatedAt(t time.Time) *LevelUpdate {
	lu.updated_at = &t
	return lu
}

// SetName sets the name field.
func (lu *LevelUpdate) SetName(s string) *LevelUpdate {
	lu.name = &s
	return lu
}

// SetDescription sets the description field.
func (lu *LevelUpdate) SetDescription(s string) *LevelUpdate {
	lu.description = &s
	return lu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (lu *LevelUpdate) Save(ctx context.Context) (int, error) {
	if lu.updated_at == nil {
		v := level.UpdateDefaultUpdatedAt()
		lu.updated_at = &v
	}
	if lu.name != nil {
		if err := level.NameValidator(*lu.name); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
		}
	}
	if lu.description != nil {
		if err := level.DescriptionValidator(*lu.description); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"description\": %v", err)
		}
	}
	return lu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LevelUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LevelUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LevelUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lu *LevelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   level.Table,
			Columns: level.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint,
				Column: level.FieldID,
			},
		},
	}
	if ps := lu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := lu.updated_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: level.FieldUpdatedAt,
		})
	}
	if value := lu.name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: level.FieldName,
		})
	}
	if value := lu.description; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: level.FieldDescription,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// LevelUpdateOne is the builder for updating a single Level entity.
type LevelUpdateOne struct {
	config
	id uint

	updated_at  *time.Time
	name        *string
	description *string
}

// SetUpdatedAt sets the updated_at field.
func (luo *LevelUpdateOne) SetUpdatedAt(t time.Time) *LevelUpdateOne {
	luo.updated_at = &t
	return luo
}

// SetName sets the name field.
func (luo *LevelUpdateOne) SetName(s string) *LevelUpdateOne {
	luo.name = &s
	return luo
}

// SetDescription sets the description field.
func (luo *LevelUpdateOne) SetDescription(s string) *LevelUpdateOne {
	luo.description = &s
	return luo
}

// Save executes the query and returns the updated entity.
func (luo *LevelUpdateOne) Save(ctx context.Context) (*Level, error) {
	if luo.updated_at == nil {
		v := level.UpdateDefaultUpdatedAt()
		luo.updated_at = &v
	}
	if luo.name != nil {
		if err := level.NameValidator(*luo.name); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
		}
	}
	if luo.description != nil {
		if err := level.DescriptionValidator(*luo.description); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"description\": %v", err)
		}
	}
	return luo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LevelUpdateOne) SaveX(ctx context.Context) *Level {
	l, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return l
}

// Exec executes the query on the entity.
func (luo *LevelUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LevelUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (luo *LevelUpdateOne) sqlSave(ctx context.Context) (l *Level, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   level.Table,
			Columns: level.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  luo.id,
				Type:   field.TypeUint,
				Column: level.FieldID,
			},
		},
	}
	if value := luo.updated_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: level.FieldUpdatedAt,
		})
	}
	if value := luo.name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: level.FieldName,
		})
	}
	if value := luo.description; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: level.FieldDescription,
		})
	}
	l = &Level{config: luo.config}
	_spec.Assign = l.assignValues
	_spec.ScanValues = l.scanValues()
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return l, nil
}
